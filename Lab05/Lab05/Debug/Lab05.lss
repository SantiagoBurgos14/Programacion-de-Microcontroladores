
Lab05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000238  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  000002d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000797  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c8  00000000  00000000  00000b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000382  00000000  00000000  000011cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d7  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000070  00000000  00000000  00001993  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001a03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  9e:	0c 94 1a 01 	jmp	0x234	; 0x234 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
	}
}

void initADC(void){
	
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	//Vref = AVcc = 5Vs<
	ADMUX |= (1<<REFS0);
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  b2:	80 81       	ld	r24, Z
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	80 83       	st	Z, r24
	// justifica hacia la izquierda
	ADMUX |= (1 << ADLAR);
  b8:	80 81       	ld	r24, Z
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	80 83       	st	Z, r24
	ADCSRA = 0;
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	// encendiendo ADC
	ADCSRA |= (1<<ADEN);
  c4:	80 81       	ld	r24, Z
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	80 83       	st	Z, r24
	// habilita isr (interrupcion ) ADC
	ADCSRA |= (1<<ADIE);
  ca:	80 81       	ld	r24, Z
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	80 83       	st	Z, r24
	// prescaler de 128 > 16M / 128 = 125khz
	ADCSRA |= (1<<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  d0:	80 81       	ld	r24, Z
  d2:	87 60       	ori	r24, 0x07	; 7
  d4:	80 83       	st	Z, r24
	// deshabilitar la entrada digital
	DIDR0|= (1 << ADC0D)|(1<<ADC1D)|(1<< ADC2D);
  d6:	ee e7       	ldi	r30, 0x7E	; 126
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	87 60       	ori	r24, 0x07	; 7
  de:	80 83       	st	Z, r24
  e0:	08 95       	ret

000000e2 <main>:
void initADC(void);

int main(void)
{
	
	cli();
  e2:	f8 94       	cli
	DDRB |= (1<<PORTB2)|(1<<PORTB1);	//Canales de salida
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	86 60       	ori	r24, 0x06	; 6
  e8:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PORTD5);
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	8a b9       	out	0x0a, r24	; 10
	
	PORTD = 0;
  f0:	1b b8       	out	0x0b, r1	; 11
		
	DDRC = 0;
  f2:	17 b8       	out	0x07, r1	; 7
	
	TCCR1A |= (1 << COM1B1)|(1<< COM1A1);  // no invertido (1ms en alto y 19 en bajo)
  f4:	e0 e8       	ldi	r30, 0x80	; 128
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 6a       	ori	r24, 0xA0	; 160
  fc:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM11);			// PWM con ICR (valMax)
  fe:	80 81       	ld	r24, Z
 100:	82 60       	ori	r24, 0x02	; 2
 102:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
 104:	e1 e8       	ldi	r30, 0x81	; 129
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	88 61       	ori	r24, 0x18	; 24
 10c:	80 83       	st	Z, r24
	
	TCCR1B |= (1 << CS11);//Prescaler 8
 10e:	80 81       	ld	r24, Z
 110:	82 60       	ori	r24, 0x02	; 2
 112:	80 83       	st	Z, r24
	
	ICR1 = 39999;    //valMax
 114:	8f e3       	ldi	r24, 0x3F	; 63
 116:	9c e9       	ldi	r25, 0x9C	; 156
 118:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 11c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	a = 0;
 120:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <a+0x1>
 124:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <a>
	b = 1000;
 128:	88 ee       	ldi	r24, 0xE8	; 232
 12a:	93 e0       	ldi	r25, 0x03	; 3
 12c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <b+0x1>
 130:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <b>
	OCR1B = b;
 134:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 138:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	c = 0;
 13c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 140:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	d = 1000;
 144:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 148:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	OCR1A = d;
 14c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 150:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR0B |= (1<<CS01);			// PReescaler
	
	
	OCR0B= 0;
	*/
	DDRD |= (1 << PORTD6) | (1 << PORTD5);		
 154:	8a b1       	in	r24, 0x0a	; 10
 156:	80 66       	ori	r24, 0x60	; 96
 158:	8a b9       	out	0x0a, r24	; 10
	TCCR0A = 0;
 15a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
 15c:	15 bc       	out	0x25, r1	; 37
	
	//no inverted and fast PWM, TOP 255 (default)
	TCCR0A |= (1 << COM0A1) | (1  << WGM00) | (1 << WGM01) | (1 << COM0B1) | (1 << COM0B0);
 15e:	84 b5       	in	r24, 0x24	; 36
 160:	83 6b       	ori	r24, 0xB3	; 179
 162:	84 bd       	out	0x24, r24	; 36
	
	//Prescaler 1024
	TCCR0B = 0x05;
 164:	85 e0       	ldi	r24, 0x05	; 5
 166:	85 bd       	out	0x25, r24	; 37

	initADC();
 168:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	
	sei();
 16c:	78 94       	sei
	
	while (1)
	{
		ADCSRA |= (1 << ADSC); // ADSC inicia la conversión
 16e:	ea e7       	ldi	r30, 0x7A	; 122
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 64       	ori	r24, 0x40	; 64
 176:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	8f e3       	ldi	r24, 0x3F	; 63
 17a:	9f e1       	ldi	r25, 0x1F	; 31
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0x9a>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0xa0>
 182:	00 00       	nop
 184:	f4 cf       	rjmp	.-24     	; 0x16e <main+0x8c>

00000186 <__vector_21>:
	// deshabilitar la entrada digital
	DIDR0|= (1 << ADC0D)|(1<<ADC1D)|(1<< ADC2D);
	
}

ISR (ADC_vect){				// interrupcion
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
	
	ADCSRA |= (1<<ADIF);
 19a:	ea e7       	ldi	r30, 0x7A	; 122
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	80 83       	st	Z, r24
	
	if (Seleccion == 0){
 1a4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Seleccion>
 1a8:	81 11       	cpse	r24, r1
 1aa:	15 c0       	rjmp	.+42     	; 0x1d6 <__vector_21+0x50>
		//ADMUX |= 0x00;
		//ADMUX &= ~(0x01);
		ADMUX = (ADMUX & 0xF0);
 1ac:	ec e7       	ldi	r30, 0x7C	; 124
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	80 7f       	andi	r24, 0xF0	; 240
 1b4:	80 83       	st	Z, r24
		//a = ADCH; 
		OCR1B = (200/12)*ADCH+1000;
 1b6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1ba:	20 e1       	ldi	r18, 0x10	; 16
 1bc:	82 9f       	mul	r24, r18
 1be:	c0 01       	movw	r24, r0
 1c0:	11 24       	eor	r1, r1
 1c2:	88 51       	subi	r24, 0x18	; 24
 1c4:	9c 4f       	sbci	r25, 0xFC	; 252
 1c6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1ca:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		Seleccion = 1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Seleccion>
 1d4:	25 c0       	rjmp	.+74     	; 0x220 <__vector_21+0x9a>
		
	} else if (Seleccion == 1){
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	b1 f4       	brne	.+44     	; 0x206 <__vector_21+0x80>
		//ADMUX |= 0x01;
		//ADMUX &= ~(0x00);
		ADMUX = (ADMUX & 0xF0) | 1;
 1da:	ec e7       	ldi	r30, 0x7C	; 124
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	80 7f       	andi	r24, 0xF0	; 240
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	80 83       	st	Z, r24
		//c = ADCH;
		//d = (200/12)*c+1000;
		OCR1A = (200/12)*ADCH+1000;
 1e6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1ea:	20 e1       	ldi	r18, 0x10	; 16
 1ec:	82 9f       	mul	r24, r18
 1ee:	c0 01       	movw	r24, r0
 1f0:	11 24       	eor	r1, r1
 1f2:	88 51       	subi	r24, 0x18	; 24
 1f4:	9c 4f       	sbci	r25, 0xFC	; 252
 1f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		Seleccion = 2;
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Seleccion>
 204:	0d c0       	rjmp	.+26     	; 0x220 <__vector_21+0x9a>
		
	}else if (Seleccion == 2){
 206:	82 30       	cpi	r24, 0x02	; 2
 208:	59 f4       	brne	.+22     	; 0x220 <__vector_21+0x9a>
			//ADMUX |= 0x02;
			//ADMUX &= ~(0x01);
			ADMUX = (ADMUX & 0xF0) | 2;
 20a:	ec e7       	ldi	r30, 0x7C	; 124
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	80 7f       	andi	r24, 0xF0	; 240
 212:	82 60       	ori	r24, 0x02	; 2
 214:	80 83       	st	Z, r24
			OCR0B = ADCH;
 216:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 21a:	88 bd       	out	0x28, r24	; 40
			Seleccion = 0; //siguiente seleccion
 21c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Seleccion>
		
	}
	
	
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
