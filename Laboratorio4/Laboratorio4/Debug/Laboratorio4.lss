
Laboratorio4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000204  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  000002a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000855  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000704  00000000  00000000  00000bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fa  00000000  00000000  000012b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  000016ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015b  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001c7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  9e:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initPCINT1>:

}
}
void initPCINT1(){

	PCICR |= (1 << PCIE1);		
  a6:	e8 e6       	ldi	r30, 0x68	; 104
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);	//mascara
  b0:	ec e6       	ldi	r30, 0x6C	; 108
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <initADC>:
}


void initADC(void){
	
	ADMUX = 0;
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	10 82       	st	Z, r1
	
	//Vref = AVcc = 5Vs
	ADMUX |= (1<<REFS0);
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  c8:	80 81       	ld	r24, Z
  ca:	8f 77       	andi	r24, 0x7F	; 127
  cc:	80 83       	st	Z, r24
	
	// justifica hacia la izquierda
	ADMUX |= (1 << ADLAR);
  ce:	80 81       	ld	r24, Z
  d0:	80 62       	ori	r24, 0x20	; 32
  d2:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	10 82       	st	Z, r1
	
	// encendiendo ADC
	ADCSRA |= (1<<ADEN);
  da:	80 81       	ld	r24, Z
  dc:	80 68       	ori	r24, 0x80	; 128
  de:	80 83       	st	Z, r24
	
	// habilita isr (interrupcion ) ADC
	
	ADCSRA |= (1<<ADIE);
  e0:	80 81       	ld	r24, Z
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	80 83       	st	Z, r24
	
	// prescaler de 128 > 16M / 128 = 125khz
	
	ADCSRA |= (1<<ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  e6:	80 81       	ld	r24, Z
  e8:	87 60       	ori	r24, 0x07	; 7
  ea:	80 83       	st	Z, r24
	
	// deshabilitar la entrada digital de PC2????
	DIDR0|= (1 << ADC2D);
  ec:	ee e7       	ldi	r30, 0x7E	; 126
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	84 60       	ori	r24, 0x04	; 4
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <main>:
*******************
*/

int main(void){

	cli();
  f8:	f8 94       	cli
	DDRD = 0xFF;			//POTD COMO SALIDA
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;					
  fe:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0;				// DESACTIVO RX Y TX
 100:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	DDRB |= (1 << PINB0) | (1 << PINB1) | (1 << PINB2);
 104:	84 b1       	in	r24, 0x04	; 4
 106:	87 60       	ori	r24, 0x07	; 7
 108:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
 10a:	15 b8       	out	0x05, r1	; 5
	PORTB |= (1 << PORTB1);
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	85 b9       	out	0x05, r24	; 5

	PORTC|= (1 << PINC0) | (1 << PINC1);
 112:	88 b1       	in	r24, 0x08	; 8
 114:	83 60       	ori	r24, 0x03	; 3
 116:	88 b9       	out	0x08, r24	; 8
	DDRC &= ~(1 << PINC0) | ~(1 << PINC1);			//PUSHBUTTONS
 118:	87 b1       	in	r24, 0x07	; 7
 11a:	87 b9       	out	0x07, r24	; 7

	
	initPCINT1();
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <initPCINT1>
	initADC();	
 120:	0e 94 5e 00 	call	0xbc	; 0xbc <initADC>
	
	sei();
 124:	78 94       	sei


	while (1)
{

	ADCSRA |= (1<<ADSC);
 126:	ea e7       	ldi	r30, 0x7A	; 122
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	8f e1       	ldi	r24, 0x1F	; 31
 132:	9e e4       	ldi	r25, 0x4E	; 78
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0x3c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x42>
 13a:	00 00       	nop
	_delay_ms(5);

	uint8_t valorHex = ADCH;
 13c:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	uint8_t valor1 = valorHex/16;
 140:	ae 2f       	mov	r26, r30
 142:	a2 95       	swap	r26
 144:	af 70       	andi	r26, 0x0F	; 15
	uint8_t valor2 = valorHex %16;
 146:	ef 70       	andi	r30, 0x0F	; 15

	// Multiplexacion	
	
	
	PORTB = 0;
 148:	15 b8       	out	0x05, r1	; 5
	PORTB |= (1 << PORTB0);
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << PORTB1) | ~(1 << PORTB2);
 150:	85 b1       	in	r24, 0x05	; 5
 152:	85 b9       	out	0x05, r24	; 5
	PORTD = display[valor1];
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	a0 50       	subi	r26, 0x00	; 0
 158:	bf 4f       	sbci	r27, 0xFF	; 255
 15a:	8c 91       	ld	r24, X
 15c:	8b b9       	out	0x0b, r24	; 11
 15e:	8f e1       	ldi	r24, 0x1F	; 31
 160:	9e e4       	ldi	r25, 0x4E	; 78
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0x6a>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x70>
 168:	00 00       	nop
	_delay_ms(5);
	
	PORTB = 0;
 16a:	15 b8       	out	0x05, r1	; 5
	PORTB |= (1 << PORTB1);
 16c:	85 b1       	in	r24, 0x05	; 5
 16e:	82 60       	ori	r24, 0x02	; 2
 170:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << PORTB0) | ~(1 << PORTB2);
 172:	85 b1       	in	r24, 0x05	; 5
 174:	85 b9       	out	0x05, r24	; 5
	PORTD = display[valor2];
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	e0 50       	subi	r30, 0x00	; 0
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	80 81       	ld	r24, Z
 17e:	8b b9       	out	0x0b, r24	; 11
	
	PORTB = 0;
 180:	15 b8       	out	0x05, r1	; 5
	PORTB |= (1 << PORTB2);
 182:	85 b1       	in	r24, 0x05	; 5
 184:	84 60       	ori	r24, 0x04	; 4
 186:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << PORTB0) | ~(1 << PORTB1);
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	85 b9       	out	0x05, r24	; 5
	PORTD = counter;
 18c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 190:	8b b9       	out	0x0b, r24	; 11
 192:	8f e1       	ldi	r24, 0x1F	; 31
 194:	9e e4       	ldi	r25, 0x4E	; 78
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x9e>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0xa4>
 19c:	00 00       	nop
 19e:	c3 cf       	rjmp	.-122    	; 0x126 <main+0x2e>

000001a0 <__vector_21>:
	// deshabilitar la entrada digital de PC2????
	DIDR0|= (1 << ADC2D);
	
}

ISR (ADC_vect){
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31

	ADCSRA |= (ADIF); // apaga la bandera
 1b0:	ea e7       	ldi	r30, 0x7A	; 122
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	84 60       	ori	r24, 0x04	; 4
 1b8:	80 83       	st	Z, r24
}
 1ba:	ff 91       	pop	r31
 1bc:	ef 91       	pop	r30
 1be:	8f 91       	pop	r24
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <__vector_4>:

ISR(PCINT1_vect){
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	8f 93       	push	r24
	
	if (!(PINC & (1 <<PINC0))){
 1d6:	30 99       	sbic	0x06, 0	; 6
 1d8:	06 c0       	rjmp	.+12     	; 0x1e6 <__vector_4+0x1c>
		counter++;
 1da:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1de:	8f 5f       	subi	r24, 0xFF	; 255
 1e0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <__vector_4+0x2a>
		} else if(!(PINC &(1 <<PINC1))){
 1e6:	31 99       	sbic	0x06, 1	; 6
 1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <__vector_4+0x2a>
		counter--;
 1ea:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1ee:	81 50       	subi	r24, 0x01	; 1
 1f0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		}else{
		counter = counter;
	}
	
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
